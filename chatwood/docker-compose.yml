version: "3.9"

services:
  db:
    image: postgres:15-alpine
    restart: always
    ports:
      - "5432:5432"
    volumes:
      # O volume agora usará um subdiretório local para persistir os dados
      - ./postgres-data:/var/lib/postgresql/data
    env_file:
      - .env

  redis:
    image: redis:7.0-alpine
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      # O volume agora usará um subdiretório local
      - ./redis-data:/data
    env_file:
      - .env

  rails:
    # A mágica acontece aqui: `build: .` agora encontra o Dockerfile
    build: .
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - db
      - redis
    volumes:
      # O volume de storage para uploads
      - ./storage:/app/storage
    env_file:
      - .env
    command: bundle exec rails s -p 3000 -b '0.0.0.0'

  sidekiq:
    # Usa a mesma imagem construída para o serviço 'rails'
    build: .
    restart: always
    depends_on:
      - db
      - redis
    volumes:
      - ./storage:/app/storage
    env_file:
      - .env
    command: bundle exec sidekiq -C config/sidekiq.yml

# Nota: A declaração de volumes no final não é mais necessária
# porque estamos usando "bind mounts" (ex: ./postgres-data:/...)
# Mas manter não causa problema.
volumes:
  postgres-data:
  redis-data:
  storage: